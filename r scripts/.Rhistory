cat("F1 Score:", f1_score, "\n")
roc_obj
roc_obj
View(roc_obj)
roc_obj[["sensitivities"]]
roc_obj[["specificities"]]
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),
percent = TRUE)
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2,0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),
percent = TRUE)
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
print.thres = TRUE, # 添加截点和95%CI
grid = c(20, 20),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue"
print.thres = TRUE, # 添加截点和95%CI
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
max.polygon = TRUE,
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
max.polygon = TRUE,
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
asp = 1
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
asp = 1
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE, # 添加截点和95%CI
# grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
asp = 1
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
asp = 1
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(0, type = "n",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True Positive Rate (TPR)",
xlim = c(0, 1),
ylim = c(0, 1),
asp = 1)
# plot(
#   roc_obj,
#   main = "ROC Curve - XGBoost",
#   xlab = "False Positive Rate (FPR)",
#   ylab = "True PositiveRate (TPR)",
#   legacy.axes = TRUE, # y轴格式更改
#   print.auc = TRUE, # 显示AUC面积
#   auc.polygon = TRUE,
#   auc.polygon.col = "lightblue",
#   print.thres = TRUE, # 添加截点和95%CI
#   grid = c(0.2, 0.2),
#   grid.col = c("blue","blue"),
#   # xlim = c(0, 1),
#   # ylim = c(0, 1),
#   asp = 1
# )
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(0, type = "n",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True Positive Rate (TPR)",
xlim = c(0, 1),
ylim = c(0, 1),
asp = 1)
# plot(
#   roc_obj,
#   main = "ROC Curve - XGBoost",
#   xlab = "False Positive Rate (FPR)",
#   ylab = "True PositiveRate (TPR)",
#   legacy.axes = TRUE, # y轴格式更改
#   print.auc = TRUE, # 显示AUC面积
#   auc.polygon = TRUE,
#   auc.polygon.col = "lightblue",
#   print.thres = TRUE, # 添加截点和95%CI
#   grid = c(0.2, 0.2),
#   grid.col = c("blue","blue"),
#   # xlim = c(0, 1),
#   # ylim = c(0, 1),
#   asp = 1
# )
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
asp = 1
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE,
print.auc = TRUE,
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE,
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
asp = 1
)
View(X)
X <- read.csv("./data/X.csv", header = TRUE)
y <- read.csv("./data/y.csv", header = TRUE)
View(X)
View(X)
View(y)
View(y)
# 划分训练集和测试集
data <- cbind(X, y)
# 加载数据
X <- read.csv("./data/X.csv", header = TRUE)
y <- read.csv("./data/y.csv", header = TRUE)
# 划分训练集和测试集
data <- cbind(X, y)
indices <- 1:nrow(data)
set.seed(123) # <=
shuffled_indices <- sample(indices)
train_size <- floor(0.8 * length(indices)) # <=
train_indices <- shuffled_indices[1:train_size]
test_indices <- shuffled_indices[(train_size + 1):length(indices)]
train_data <- data[train_indices, ]
test_data <- data[test_indices, ]
# Logistic Regression using stepAIC
library('MASS')
library('caret')
logit_model <- glm(dod ~ ., data = train_data, family = binomial)
step_model <- stepAIC(logit_model, direction = "both")
summary.glm(step_model)
ci <- confint(step_model)
exp(cbind(OR <- coef(step_model), ci))
predictions <- predict(step_model, test_data, type="response")
# Performance
confusion_matrix <- table(test_data[, ncol(test_data)], predictions)
## 计算准确率
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
## 计算召回率
recall <- diag(confusion_matrix) / rowSums(confusion_matrix)
cat("Recall:", recall, "\n")
## 计算F1分数
precision <- diag(confusion_matrix) / colSums(confusion_matrix)
f1_score <- 2 * (precision * recall) / (precision + recall)
cat("F1 Score:", f1_score, "\n")
# ROC Curve
library(pROC)
roc_obj <- roc(test_data[, ncol(test_data)], predictions)
plot(
roc_obj,
col = "red",
main = "ROC Curve - Logistic Regression",
legacy.axes = T, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
print.thres = TRUE, # 添加截点和95%CI
grid=c(0.2,0.2),
grid.col=c("blue","yellow")
)
source("~/Repo/IBD-EDA/r scripts/logistic_regression_dod.R")
source("~/Repo/IBD-EDA/r scripts/logistic_regression_dod.R")
source("~/Repo/IBD-EDA/r scripts/xgboost_dod.R")
source("~/Repo/IBD-EDA/r scripts/xgboost_dod.R")
# 模型评价
library(pROC)
roc_obj <- roc(test_y, predictions)
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
legacy.axes = T, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
print.thres = TRUE, # 添加截点和95%CI
grid=c(0.2,0.2),
grid.col=c("blue","yellow")
)
source("~/Repo/IBD-EDA/r scripts/logistic_regression_dod.R")
# 加载数据
X <- read.csv("./data/X.csv", header = TRUE)
source("~/Repo/IBD-EDA/r scripts/logistic_regression_dod.R")
source("~/Repo/IBD-EDA/r scripts/logistic_regression_dod.R")
X <- read.csv("./data/X.csv", header = TRUE)
y <- read.csv("./data/y.csv", header = TRUE)
# 划分训练集和测试集
data <- cbind(X, y)
indices <- 1:nrow(data)
set.seed(123) # <=
shuffled_indices <- sample(indices)
train_size <- floor(0.7 * length(indices)) # <=
train_indices <- shuffled_indices[1:train_size]
test_indices <- shuffled_indices[(train_size + 1):length(indices)]
train_data <- data[train_indices, ]
test_data <- data[test_indices, ]
# Logistic Regression using stepAIC
library('MASS')
library('caret')
logit_model <- glm(dod ~ ., data = train_data, family = binomial)
step_model <- stepAIC(logit_model, direction = "both")
View(X)
View(X)
View(X)
View(X)
View(X)
View(X)
View(X)
summary.glm(step_model)
ci <- confint(step_model)
exp(cbind(OR <- coef(step_model), ci))
predictions <- predict(step_model, test_data, type="response")
# Performance
confusion_matrix <- table(test_data[, ncol(test_data)], predictions)
confusion_matrix
# Performance
confusion_matrix <- table(test_data[, ncol(test_data)], ifelse(predictions > 0.5, 1, 0))
confusion_matrix
## 计算准确率
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
## 计算召回率
recall <- diag(confusion_matrix) / rowSums(confusion_matrix)
cat("Recall:", recall, "\n")
## 计算F1分数
precision <- diag(confusion_matrix) / colSums(confusion_matrix)
f1_score <- 2 * (precision * recall) / (precision + recall)
cat("F1 Score:", f1_score, "\n")
# ROC Curve
library(pROC)
roc_obj <- roc(test_data[, ncol(test_data)], predictions)
plot(
roc_obj,
col = "red",
main = "ROC Curve - Logistic Regression",
legacy.axes = T, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
print.thres = TRUE, # 添加截点和95%CI
grid=c(0.2,0.2),
grid.col=c("blue","yellow")
)
# 加载数据
X <- read.csv("./data/X.csv", header = TRUE)
y <- read.csv("./data/y.csv", header = TRUE)
source("~/Repo/IBD-EDA/r scripts/logistic_regression_dod.R")
install.packages(c("cli", "data.table", "e1071", "fansi", "recipes", "stringi", "timeDate"))
install.packages(c("cli", "data.table", "e1071", "fansi", "recipes", "stringi", "timeDate"))
install.packages(c("cli", "data.table", "e1071", "fansi", "recipes", "stringi", "timeDate"))
install.packages(c("cli", "data.table", "e1071", "fansi", "recipes", "stringi", "timeDate"))
install.packages(c("cli", "data.table", "e1071", "fansi", "recipes", "stringi", "timeDate"))
install.packages(c("cli", "data.table", "e1071", "fansi", "recipes", "stringi", "timeDate"))
install.packages(c("cli", "data.table", "e1071", "fansi", "recipes", "stringi", "timeDate"))
install.packages(c("cli", "data.table", "e1071", "fansi", "recipes", "stringi", "timeDate"))
install.packages(c("cli", "data.table", "e1071", "fansi", "recipes", "stringi", "timeDate"))
install.packages(c("cli", "data.table", "e1071", "fansi", "recipes", "stringi", "timeDate"))
install.packages(c("cli", "data.table", "e1071", "fansi", "recipes", "stringi", "timeDate"))
install.packages(c("cli", "data.table", "e1071", "fansi", "recipes", "stringi", "timeDate"))
install.packages(c("cli", "data.table", "e1071", "fansi", "recipes", "stringi", "timeDate"))
install.packages(c("cli", "data.table", "e1071", "fansi", "recipes", "stringi", "timeDate"))
gc()
libPaths()
.libPaths()
install.packages('IRkernel')
IRkernel::installspec()
X <- read.csv("./data/X.csv", header = TRUE)
y <- read.csv("./data/y.csv", header = TRUE)
X <- read.csv("./data/X.csv", header = TRUE)
y <- read.csv("./data/y.csv", header = TRUE)
