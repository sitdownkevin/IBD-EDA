## 计算召回率
recall <- diag(confusion_matrix) / rowSums(confusion_matrix)
cat("Recall:", recall, "\n")
## 计算F1分数
precision <- diag(confusion_matrix) / colSums(confusion_matrix)
f1_score <- 2 * (precision * recall) / (precision + recall)
cat("F1 Score:", f1_score, "\n")
X <- read.csv("./data/X.csv", header = TRUE)
y <- read.csv("./data/y.csv", header = TRUE)
data <- cbind(X, y)
set.seed(123) # 123
indices <- 1:nrow(data)
shuffled_indices <- sample(indices)
train_size <- floor(0.7 * length(indices)) # 修改比例
train_indices <- shuffled_indices[1:train_size]
test_indices <- shuffled_indices[(train_size + 1):length(indices)]
train_data <- data[train_indices, ]
test_data <- data[test_indices, ]
library(xgboost)
train_X <- as.matrix(train_data[, -ncol(train_data)])
train_y <- train_data[, ncol(train_data)]
dtrain <- xgb.DMatrix(data = train_X, label = train_y)
test_X <- as.matrix(test_data[, -ncol(test_data)])
test_y <- test_data[, ncol(test_data)]
dtest <- xgb.DMatrix(data = test_X, label = test_y)
xgb_model <- xgboost(data = dtrain, nrounds = 10, objective = "binary:logistic")
predictions <- predict(xgb_model, dtest)
predictions
min(predictions)
max(predictions)
mean(predictions)
ifelse(predictions > 0.5, 1, 0)
confusion_matrix <- table(test_y, ifelse(predictions > 0.5, 1, 0))
## 计算准确率
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
## 计算召回率
recall <- diag(confusion_matrix) / rowSums(confusion_matrix)
cat("Recall:", recall, "\n")
## 计算F1分数
precision <- diag(confusion_matrix) / colSums(confusion_matrix)
f1_score <- 2 * (precision * recall) / (precision + recall)
cat("F1 Score:", f1_score, "\n")
predictions
library(pROC)
roc_obj <- roc(test_y, predictions)
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2,0.2),
grid.col = c("blue","blue")
)
library(pROC)
roc_obj <- roc(as.numeric(test_y), as.numeric(predictions))
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2,0.2),
grid.col = c("blue","blue")
)
library(pROC)
roc_obj <- roc(as.numeric(test_y), as.numeric(predictions))
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2,0.2),
grid.col = c("blue","blue"),
xlim = c(0, 1)
ylim = c(0, 1)
library(pROC)
roc_obj <- roc(as.numeric(test_y), as.numeric(predictions))
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2,0.2),
grid.col = c("blue","blue"),
xlim = c(0, 1),
ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y), as.numeric(predictions))
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2,0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
confusion_matrix
rowSums(confusion_matrix)
recall
confusion_matrix[0, 0]
confusion_matrix[1, 1]
confusion_matrix[1, 2]
f1_score
confusion_matrix[1,]
sum(confusion_matrix[1,])
diag(confusion_matrix[1]) / sum(confusion_matrix[1,])
diag(confusion_matrix)[1] / sum(confusion_matrix[1,])
confusion_matrix <- table(test_y, ifelse(predictions > 0.5, 1, 0))
## 计算 Accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
## 计算 Recall
recall <- diag(confusion_matrix)[1] / sum(confusion_matrix[1,])
cat("Recall:", recall, "\n")
## 计算 F1 Score
precision <- diag(confusion_matrix) / colSums(confusion_matrix)
f1_score <- 2 * (precision * recall) / (precision + recall)
cat("F1 Score:", f1_score, "\n")
confusion_matrix <- table(test_y, ifelse(predictions > 0.5, 1, 0))
## 计算 Accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
## 计算 Recall
recall <- diag(confusion_matrix)[1] / sum(confusion_matrix[1,])
cat("Recall:", recall, "\n")
## 计算 F1 Score
precision <- diag(confusion_matrix)[1] / colSums(confusion_matrix)[1]
f1_score <- 2 * (precision * recall) / (precision + recall)
cat("F1 Score:", f1_score, "\n")
confusion_matrix <- table(as.numeric(test_y), as.numeric(ifelse(predictions > 0.5, 1, 0)))
## 计算 Accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
## 计算 Recall
recall <- diag(confusion_matrix)[1] / sum(confusion_matrix[1,])
cat("Recall:", recall, "\n")
## 计算 F1 Score
precision <- diag(confusion_matrix)[1] / colSums(confusion_matrix)[1]
f1_score <- 2 * (precision * recall) / (precision + recall)
cat("F1 Score:", f1_score, "\n")
roc_obj
roc_obj
View(roc_obj)
roc_obj[["sensitivities"]]
roc_obj[["specificities"]]
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),
percent = TRUE)
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2,0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),
percent = TRUE)
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
print.thres = TRUE, # 添加截点和95%CI
grid = c(20, 20),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue"
print.thres = TRUE, # 添加截点和95%CI
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
col = "red",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
max.polygon = TRUE,
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
max.polygon = TRUE,
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
asp = 1
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
asp = 1
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE, # 添加截点和95%CI
# grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
asp = 1
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
asp = 1
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(0, type = "n",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True Positive Rate (TPR)",
xlim = c(0, 1),
ylim = c(0, 1),
asp = 1)
# plot(
#   roc_obj,
#   main = "ROC Curve - XGBoost",
#   xlab = "False Positive Rate (FPR)",
#   ylab = "True PositiveRate (TPR)",
#   legacy.axes = TRUE, # y轴格式更改
#   print.auc = TRUE, # 显示AUC面积
#   auc.polygon = TRUE,
#   auc.polygon.col = "lightblue",
#   print.thres = TRUE, # 添加截点和95%CI
#   grid = c(0.2, 0.2),
#   grid.col = c("blue","blue"),
#   # xlim = c(0, 1),
#   # ylim = c(0, 1),
#   asp = 1
# )
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(0, type = "n",
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True Positive Rate (TPR)",
xlim = c(0, 1),
ylim = c(0, 1),
asp = 1)
# plot(
#   roc_obj,
#   main = "ROC Curve - XGBoost",
#   xlab = "False Positive Rate (FPR)",
#   ylab = "True PositiveRate (TPR)",
#   legacy.axes = TRUE, # y轴格式更改
#   print.auc = TRUE, # 显示AUC面积
#   auc.polygon = TRUE,
#   auc.polygon.col = "lightblue",
#   print.thres = TRUE, # 添加截点和95%CI
#   grid = c(0.2, 0.2),
#   grid.col = c("blue","blue"),
#   # xlim = c(0, 1),
#   # ylim = c(0, 1),
#   asp = 1
# )
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE, # y轴格式更改
print.auc = TRUE, # 显示AUC面积
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE, # 添加截点和95%CI
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
asp = 1
)
library(pROC)
roc_obj <- roc(as.numeric(test_y),
as.numeric(predictions),)
plot(
roc_obj,
main = "ROC Curve - XGBoost",
xlab = "False Positive Rate (FPR)",
ylab = "True PositiveRate (TPR)",
legacy.axes = TRUE,
print.auc = TRUE,
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE,
grid = c(0.2, 0.2),
grid.col = c("blue","blue"),
# xlim = c(0, 1),
# ylim = c(0, 1),
asp = 1
)
