p = c(FALSE, TRUE, TRUE, TRUE)
q = c(TRUE, FALSE, TRUE, FALSE)
pAndqOrr
(p & q)
(p & q) | r
r = c(TRUE, FALSE, TRUE, TRUE)
(p & q) | r
p | (p | q)
d2 = expand.grid(0:1, 0:1, 0:1)
d2
p3 = as.logical(d2$Var1)
q4 = as.logical(d2$Var2)
r4 = as.logical(d2$Var3)
p3
is_prime <- function(x) {
for x in 2:100 {
is_prime <- function(x) {
for (x in 2:100) {
print(x)
}
}
is_prime(30)
is_prime <- function(x) {
for (i in 2:100) {
if (x %% i == 0) {
print(i)
}
}
}
is_prime(30)
is_prime <- function(x) {
for (i in 2:100) {
if (x %% i == 0) {
print(i)
}
}
while (x %% i == 0) {
x = x %% i
}
if (x == 1) {
break
}
}
is_prime(30)
is_prime <- function(x) {
for (i in 2:100) {
if (x %% i == 0) {
print(i)
}
}
while (x %% i == 0) {
x = x %% i
}
if (x == 1) {
break
}
}
is_prime(30)
is_prime <- function(x) {
for (i in 2:100) {
if (x %% i == 0) {
print(i)
}
}
while (x %% i == 0) {
x = x %% i
}
if (x == 1) {
break
}
}
is_prime(30)
is_prime <- function(x) {
for (i in 2:100) {
if (x %% i == 0) {
print(i)
}
}
while (x %% i == 0) {
x = x %% i
}
if (x == 1) {
break
}
}
is_prime(30)
is_prime <- function(x) {
for (i in 2:100) {
if (x %% i == 0) {
print(i)
}
}
while (x %% i == 0) {
x = x %% i
}
if (x == 1) {
break
}
}
is_prime(36)
x <-
primeNum = numeric(x / 10)
x <- primeNum = numeric(x / 10)
x <- 1
x++
x <- 1
x++
x += 1
x ++ 1
for (x <- 1; x < 2; x ++) {
repeat {
x = 2
m = 2
n = x %% m
if (n == 0 && x == m) {
print(x)
x = x + 1
} else if (n == 0 && m < x) {
x = x + 1
} else if (x == 1) {
break
}
}
repeat {
x = 2
m = 2
n = x %% m
if (n == 0 && x == m) {
print(x)
x = x + 1
} else if (n == 0 && m < x) {
x = x + 1
} else if (x == 15) {
break
}
}
x = 1
x++
w
x++;
x++
x++2
x++23
primeNums <- function(x) {
for (i in 2:x) {
for (j in 2:i) {
if (i %% j == 0) {
break
}
if (j == i) {
return i;
primeNums <- function(x) {
for (i in 2:x) {
for (j in 2:i) {
if (i %% j == 0) {
break
}
if (j == i) {
return(i);
}
}
}
}
primeNums(36);
primeNums <- function(x) {
for (i in 2:x) {
for (j in 2:i) {
if (i %% j == 0) {
break
}
if (j == i) {
return(i);
}
}
}
}
primeNums(36);
primeNums <- function(x) {
for (i in 2:x) {
for (j in 2:i) {
if (i %% j == 0) {
break
}
if (j == i) {
return(i);
}
}
}
}
primeNums(36);
primeNums <- function(x) {
for (i in 2:x) {
for (j in 2:i) {
if (i %% j == 0) {
break
}
if (j == i) {
return(i);
}
}
}
}
primeNums(36);
primeNums <- function(x) {
for (i in 2:x) {
for (j in 2:i) {
if (i %% j == 0) {
break
}
if (j == i) {
return(i);
}
}
}
}
primeNums(36)
primeNums <- function(x) {
for (i in 2:x) {
for (j in 2:i) {
if (i %% j == 0) {
break
}
if (j == i) {
return(i);
}
}
}
}
primeNums(36)
primeNums(36)
numeric(3)
numeric(10)
primeNums <- function(n) {
cnt = 1
for (i in 2:n) {
flag = 0
prime = numeric(n)
for (j in 2:i) {
if (i %% j == 0) {
flag = 1
}
if (flag == 0) {
prime[cnt] = i
cnt = cnt + 1
}
}
}
return prime[1:cnt+1]
primeNums <- function(n) {
cnt = 1
for (i in 2:n) {
flag = 0
prime = numeric(n)
for (j in 2:i) {
if (i %% j == 0) {
flag = 1
}
if (flag == 0) {
prime[cnt] = i
cnt = cnt + 1
}
}
}
return (prime[1:cnt+1])
}
primeNums(36)
primeNums(39)
primeNums(20)
p = numeric()
p[1]
p[1] = 1
prime.list <- function(n) {
if (n < 1 | n == 1) {
print('is not prime')
} else if (n > 1) {
for (i in 2:n) {
if (i == 2) {
print(i)
} else if (sum(i %% 2:(i-1)==0) == 0) {
print(i)
}
}
}
}
prime.list(36)
numeric(2)
c(2)
c(2, 2)
a<-c(2, 2)
a
a[3] =5
a
0.35 * 0.40 / 0.43
function a(X) {
ppois(10, 3)
f <- function() {
return (3)
}
f
f()
f()
f()
3 / 4000
389 / 42-------
389 / 420000000
3 mod 3
3 mod 2
sqrt(4)
sqrt(4.3)
skewness()
install.packages('moments')
pwd
pwd)_
pwd()
install.packages(AirPassengers)
library()
chooseCRANmirror()
data("AirPassengers")
install.packages()
install.packages('moments')
setwd("~/Repo/gp-ibd/ r scripts")
knitr::opts_chunk$set(echo = TRUE)
X <- read.csv("X.csv", header = TRUE)
y <- read.csv("y.csv", header = TRUE)
X <- read.csv("X.csv", header = TRUE)
y <- read.csv("y.csv", header = TRUE)
X <- read.csv("X.csv", header = TRUE)
y <- read.csv("y.csv", header = TRUE)
X <- read.csv("X.csv", header = TRUE)
y <- read.csv("y.csv", header = TRUE)
X <- read.csv("X.csv", header = TRUE)
y <- read.csv("y.csv", header = TRUE)
X <- read.csv("X.csv", header = TRUE)
y <- read.csv("y.csv", header = TRUE)
X <- read.csv("X.csv", header = TRUE)
y <- read.csv("y.csv", header = TRUE)
data <- cbind(X, y)
set.seed(123) # 123
indices <- 1:nrow(data)
shuffled_indices <- sample(indices)
train_size <- floor(0.7 * length(indices)) # 修改比例
train_indices <- shuffled_indices[1:train_size]
test_indices <- shuffled_indices[(train_size + 1):length(indices)]
train_data <- data[train_indices, ]
test_data <- data[test_indices, ]
data <- cbind(X, y)
set.seed(123) # 123
indices <- 1:nrow(data)
shuffled_indices <- sample(indices)
train_size <- floor(0.7 * length(indices)) # 修改比例
train_indices <- shuffled_indices[1:train_size]
test_indices <- shuffled_indices[(train_size + 1):length(indices)]
train_data <- data[train_indices, ]
test_data <- data[test_indices, ]
X <- read.csv("X.csv", header = TRUE)
y <- read.csv("y.csv", header = TRUE)
data <- cbind(X, y)
set.seed(123) # 123
indices <- 1:nrow(data)
shuffled_indices <- sample(indices)
train_size <- floor(0.7 * length(indices)) # 修改比例
train_indices <- shuffled_indices[1:train_size]
test_indices <- shuffled_indices[(train_size + 1):length(indices)]
train_data <- data[train_indices, ]
test_data <- data[test_indices, ]
data <- cbind(X, y)
set.seed(123) # 可以修改的随机种子
indices <- 1:nrow(data)
shuffled_indices <- sample(indices)
train_size <- floor(0.8 * length(indices)) # 修改比例
train_indices <- shuffled_indices[1:train_size]
test_indices <- shuffled_indices[(train_size + 1):length(indices)]
train_data <- data[train_indices, ]
test_data <- data[test_indices, ]
library('MASS')
library('caret')
logit_model <- glm(dod ~ ., data = train_data, family = binomial)
step_model <- stepAIC(logit_model, direction = "both")
summary.glm(step_model)
library('MASS')
library('caret')
logit_model <- glm(dod ~ ., data = train_data, family = binomial)
step_model <- stepAIC(logit_model, direction = "both")
summary.glm(step_model)
library('MASS')
library('caret')
logit_model <- glm(dod ~ ., data = train_data, family = binomial)
step_model <- stepAIC(logit_model, direction = "both")
summary.glm(step_model)
library('MASS')
library('caret')
logit_model <- glm(dod ~ ., data = train_data, family = binomial)
step_model <- stepAIC(logit_model, direction = "both")
library('MASS')
library('caret')
logit_model <- glm(dod ~ ., data = train_data, family = binomial)
step_model <- stepAIC(logit_model, direction = "both")
summary.glm(step_model)
summary.glm(step_model)
library(pROC)
roc_obj <- roc(test_data[, ncol(test_data)], predictions)
ci <- confint(step_model)
print(ci)
exp(coef(step_model))
exp(cbind(OR <- coef(step_model), ci))
predictions <- predict(step_model, test_data)
ci <- confint(step_model)
print(ci)
exp(coef(step_model))
exp(cbind(OR <- coef(step_model), ci))
predictions <- predict(step_model, test_data)
# ci <- confint(step_model)
# print(ci)
# exp(coef(step_model))
# exp(cbind(OR <- coef(step_model), ci))
predictions <- predict(step_model, test_data)
library(pROC)
roc_obj <- roc(test_data[, ncol(test_data)], predictions)
plot(roc_obj,col="red",#颜色
main="ROC Curve - Logistic Regression",
legacy.axes=T,#y轴格式更改
print.auc=TRUE,#显示AUC面积
print.thres=TRUE,#添加截点和95%CI
grid=c(0.2,0.2),grid.col=c("blue","yellow"))#网格线设置
library(pROC)
roc_obj <- roc(test_data[, ncol(test_data)], predictions)
plot(roc_obj,col="red",#颜色
main="ROC Curve - Logistic Regression",
legacy.axes=T,#y轴格式更改
print.auc=TRUE,#显示AUC面积
print.thres=TRUE,#添加截点和95%CI
grid=c(0.2,0.2),grid.col=c("blue","yellow"))#网格线设置
